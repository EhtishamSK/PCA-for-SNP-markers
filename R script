# Set the working directory to the folder where PLINK and input files are located
# Replace with the actual folder path where your PLINK files are stored.
folder_path <- "C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Mechanical Harvest Projects/Genomic Prediction/GWAS/PCA"
setwd(folder_path)

# Define the PLINK executable location.
# This is the command to run PLINK from the current folder.
plink_executable <- "./plink"  # Use './' to specify that plink is located in the current folder

# Run a basic PLINK command to check if PLINK is working and display its version
# This command outputs the version of PLINK to confirm its proper installation and path.
plink_test_command <- paste(plink_executable, "--version")
system(plink_test_command)  # Execute the command to check the version of PLINK

# Run PLINK to generate binary files from PED/MAP input files
# Converts the input file "GBS128.plk.ped" and "GBS128.plk.map" into binary format (.bed, .bim, .fam)
system("plink --ped GBS128.plk.ped --map GBS128.plk.map --make-bed --out GBS128.plk")

# Run PLINK to generate a distance matrix based on the genotypic data
# '--allow-no-sex' allows the analysis of data without sex information
# '--nonfounders' excludes founders from the analysis
# '--distance-matrix' generates a pairwise distance matrix for individuals
# Output is saved to "dataForPCA"
system("plink --allow-no-sex --nonfounders --bfile GBS128.plk --distance-matrix --out dataForPCA")

# Load the distance matrix data generated by PLINK into R for PCA
dist_populations <- read.table("dataForPCA.mdist", header = FALSE)

# Extract the family and individual IDs from the distance matrix ID file
# 'famids' are family identifiers, and 'IID' are individual identifiers
fam <- data.frame(famids = read.table("dataForPCA.mdist.id")[, 1])  # Extract family IDs
famInd <- data.frame(IID = read.table("dataForPCA.mdist.id")[, 2])  # Extract individual IDs

# Perform PCA (Principal Component Analysis) using classical multidimensional scaling (cmdscale)
# This reduces the pairwise distance matrix into principal components (PCs)
# 'k = 5' specifies that the first 5 principal components are to be extracted
mds_populations <- cmdscale(dist_populations, eig = TRUE, k = 5)  # Extract the first 5 PCs

# Combine the eigenvectors (principal components) with the family and individual IDs
# This allows us to associate each individual with their principal component scores
eigenvec_populations <- cbind(fam, famInd, mds_populations$points)

# Calculate the proportion of variation explained by each eigenvector
# This step converts eigenvalues into percentages, indicating how much of the total variation
# each principal component accounts for
eigen_percent <- round(((mds_populations$eig) / sum(mds_populations$eig)) * 100, 2)

# Print the percentage of variation explained by each principal component
print(eigen_percent)

# Visualize PCA using ggplot2 from the tidyverse package
# This step plots the first two principal components (PC1 vs. PC2)
# The points are colored by family ID (famids) to identify clusters or groups
# It adjusts the size of the dots and removes the legend (for clusters) for a cleaner plot
if (!require("tidyverse")) {  # Check if tidyverse package is installed, if not, install it
  install.packages("tidyverse", dependencies = TRUE)  # Install tidyverse
  library(tidyverse)  # Load the tidyverse library for ggplot2
}

# Create a scatter plot of the first two principal components
# Points are colored by family ID to indicate potential clusters
ggplot(data = eigenvec_populations) +
  geom_point(mapping = aes(x = `1`, y = `2`, color = as.factor(famids)),  # Map PC1 to x-axis and PC2 to y-axis
             size = 3,  # Increase the size of the points for better visibility
             show.legend = FALSE) +  # Remove the legend for a cleaner plot (optional)
  geom_hline(yintercept = 0, linetype = "dotted") +  # Add a horizontal dotted line at y = 0
  geom_vline(xintercept = 0, linetype = "dotted") +  # Add a vertical dotted line at x = 0
  labs(title = "PCA of Capsicum Association Mapping Population",  # Title of the plot
       x = paste0("Principal component 1 (", eigen_percent[1], " %)"),  # Label for x-axis with variation % explained
       y = paste0("Principal component 2 (", eigen_percent[2], " %)")) +  # Label for y-axis with variation % explained
  theme_minimal() +  # Use a minimal theme for the plot
  scale_color_discrete(name = "Cluster")  # Optional: Add a legend if you want to show clusters

# Save the PCA plot as a PNG file with a high resolution
# The plot is saved as "PCA.png" with dimensions 8x6 inches and 600 dpi for high quality
ggsave("PCA.png", width = 8, height = 6, dpi = 600, bg = "white")
